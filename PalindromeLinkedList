# class Solution(object):
#     def isPalindrome(self, head):
#         """
#         :type head: ListNode
#         :rtype: bool
#         """
#         nums = []
#         while head:
#             nums.append(head.val)
#             head = head.next
        
#         l, r = 0, len(nums) -1
#         while l <= r:
#             if nums[l] != nums[r]:
#                 return False
#             l += 1
#             r -= 1 
#         return True 
    
    # Solution is easiest but inefficient. 
    # second solution is fast and slow pointer
    
    # Involved reversing a linked list
class Solution(object):
    def isPalindrome(self, head):
        """
        :type head: ListNode
        :rtype: bool
        """
        fast = head
        slow = head
        # find middle (from slow)
        while fast and fast.next:
            fast = fast.next.next
            slow = slow.next
        # reverse second half of list
        prev= None
        while slow:
            temp = slow.next
            slow.next = prev
            prev = slow
            slow = temp
        
        # Check Palindrome 
        left, right = head, prev
        while right:
            if left.val != right.val:
                return False
            left = left.next
            right = right.next
        return True
    