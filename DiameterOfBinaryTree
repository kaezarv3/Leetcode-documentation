# Definition for a binary tree node.

class TreeNode(object):
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

class Solution(object):
    def diameterOfBinaryTree(self, root):
        """
        :type root: TreeNode
        :rtype: int
        """
        def dfs(root):
            nonlocal diameter
            if not root:
                return 0
            left = dfs(root.left)
            right = dfs(root.right)

            # Dfs.... but calculates the diameter, We use dfs to travel 
            # to where we want to go but each recursion just counts with +1 
            # Its taking the max of all of these "+1s"? 
            
            diameter = max(left + right, diameter)        
            return max(left,right) + 1
        
        diameter = 0
        dfs(root)
        return diameter
    
    # This solution came from a youtube comment under neetcode's video. 
        