# https://leetcode.com/problems/longest-substring-without-repeating-characters/description/

# '''
# Given a string s, find the length of the longest 
# substring
#  without repeating characters.

 

# Example 1:

# Input: s = "abcabcbb"
# Output: 3
# Explanation: The answer is "abc", with the length of 3.
# Example 2:

# Input: s = "bbbbb"
# Output: 1
# Explanation: The answer is "b", with the length of 1.
# Example 3:

# Input: s = "pwwkew"
# Output: 3
# Explanation: The answer is "wke", with the length of 3.
# Notice that the answer must be a substring, "pwke" is a subsequence and not a substring.
 

# Constraints:

# 0 <= s.length <= 5 * 104
# s consists of English letters, digits, symbols and spaces.
# '''
# class Solution:
#     def lengthOfLongestSubstring(self, s: str) -> int:
#         running_max = 0
#         temp = []
#         # iterate through list and reset the temp list when we run into a repeat character, stop when we reach the end of the list.
#         for c in s:
#             if c in temp:
#                 temp.clear()
     
#             temp.append(c)
#             if running_max < len(temp):
#                 running_max = len(temp)
#         return running_max

# sol = Solution()
# print(sol.lengthOfLongestSubstring("abcabcbb")) 
# print(sol.lengthOfLongestSubstring("bbbbb")) 
# print(sol.lengthOfLongestSubstring("pwwkew")) 
# print(sol.lengthOfLongestSubstring("dvdf")) 
# -------------------------------------------------------------------version1-broke-at-dvdf------v2-from-ai-but-works---------------------------------------------------------------------------------------------------
class Solution:
    def lengthOfLongestSubstring(self, s: str) -> int:
        running_max = 0
        temp = []
        for end in range(len(s)):
            if s[end] in temp:
                while temp and s[end] in temp:
                    # While Temp is not empty AND while the current character is inside of temp
                    temp.pop(0)
                    # remove from front of temp list
            temp.append(s[end])
            running_max = max(running_max, len(temp))
        return running_max
# missing sol 
sol2 = Solution()
print(sol2.lengthOfLongestSubstring("abcabcbb")) 
print(sol2.lengthOfLongestSubstring("bbbbb")) 
print(sol2.lengthOfLongestSubstring("pwwkew")) 
print(sol2.lengthOfLongestSubstring("dvdf")) 

# Time complexity is garbage, I wonder if I should care about it. 



