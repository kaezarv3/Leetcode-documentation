#https://leetcode.com/problems/type-of-triangle/description/

'''
You are given a 0-indexed integer array nums of size 3 which can form the sides of a triangle.

A triangle is called equilateral if it has all sides of equal length.
A triangle is called isosceles if it has exactly two sides of equal length.
A triangle is called scalene if all its sides are of different lengths.

Return a string representing the type of triangle that can be formed or "none" if it cannot form a triangle.
'''

class Solution:
    def triangleType(self, nums: list[int]) -> str:
        # 3 conditional results, all eq length, two equal length, all sides diff length
        # extra condition, has to be a triangle, the sum of a pair of any two sides must be larger than the other side.
        # else return none
        # [0,0,0]
        if nums[0] == nums[1] == nums[2]:
            return "equilateral"
        # Triangle Check, Basically "If list is a triangle"
        elif (nums[0] + nums[1] > nums[2]) and (nums[0] + nums[2] > nums[1]) and (nums[1] + nums[2] > nums[0]):
            # Isosceles check
            if nums[0] == nums[1] or nums[1] == nums[2] or nums[2] == nums[0]:
                return 'isosceles'
            # scaleen
            else:
                return 'scalene'
        else:
            return 'none'

sol = Solution()
print(sol.triangleType([1,2,10]))


# instead of doing it in a static hardcoded way we could and probably should use lambda, I don't entirely understand this. 
'''class Solution:
    triangleType = lambda self, A: 'none' if sum(sorted(A)[:2]) <= max(A) else "equilateral" if len(set(A)) == 1 else "isosceles" if len(set(A)) == 2 else "scalene "'''

