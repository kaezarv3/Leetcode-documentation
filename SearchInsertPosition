# This question will use a binary search algo for o(logn) time

class Solution(object):
    def searchInsert(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: int
        """
        # # return index if target is found
        # for i in range(len(nums)):
        #     if nums[i] == target:
        #         return i
        # # Now return index if it were to be inserted in order
        # if target > nums[-1]:
        #     return len(nums)
        
        # for i in range(len(nums)):
        #     if (i < len(nums) - 1) and (nums[i] < target and target < nums[i+1]):
        #         return i+1
        pass


# nums = [1,3,5,6]
# targer = 2
# sol = Solution()
# print(sol.searchInsert(nums,targer))


# My very incorrect version.

# Now for a neetcode solution using binary search

class Solution(object):
    def searchInsert(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: int
        """    
        # Binary search Uses 3 Pointers, Left, Right, and Middle. 
        l, r =  0, len(nums) -1 
        while l<=r:
            mid = (l+r) // 2
            if target == nums[mid]:
                return mid
            if target > nums[mid]:
                l = mid + 1
            else:
                r = mid - 1
        return l
        # Why do we return left pointer, logically its just correct because of how Binary search works. gets us the index that a should be inserted in if there is none
        