# Definition for a binary tree node.
class TreeNode(object):
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right
        
class Solution(object):
    def maxDepth(self, curr):
        """
        :type root: TreeNode
        :rtype: int
        """
        # The only base case in this problem is when we reach an empty node
        if not curr:
            return 0
        
        return 1 + max(self.maxDepth(curr.left), 
                       self.maxDepth(curr.right)) # << Here we are using recursion to expand outward in both directions,
                                                  # << starting from the right and left subtree of the root.  
    
        # the result is incremented by 1 if we do not have an empty 
        # current node aka reach the depth of a subtree 

# Here we also find out that finding the max depth is VERY easy, and probably is a subproblem for alot of graph dfs problems. 
